{
    "binary": {
        "inspect": "Describe binary contents"
    },
    "call": {},
    "cloud": {
        "list": "Display a list of your devices, as well as their variables and functions",
        "claim": "Register a device with your user account with the cloud",
        "remove": "Release a device from your account so that another user may claim it",
        "name": "Give a device a name!",
        "flash": "Pass a binary, source file, or source directory to a device!",
        "compile": "Compile a source file, or directory using the cloud compiler",
        "nyan": "Make your device shout rainbows",
        "login": "Login to the cloud and store an access token locally",
        "logout": "Log out of your session and clear your saved access token"
    },
    "compile": {},
    "config": {},
    "device": {
        "add": "Register a device with your user account with the cloud",
        "remove": "Release a device from your account so that another user may claim it",
        "rename": "Give a device a name!",
        "doctor": "Put your device back into a healthy state"
    },
    "doctor": {},
    "flash": {},
    "function": {
        "list": "Show functions provided by your device(s)",
        "call": "Call a particular function on a device"
    },
    "get": {},
    "identify": {},
    "keys": {
        "new": "Generate a new set of keys for your device",
        "load": "Load a key saved in a file onto your device",
        "save": "Save a key from your device to a file",
        "send": "Tell a server which key you'd like to use by sending your public key in PEM format",
        "doctor": "Creates and assigns a new key to your device, and uploads it to the cloud",
        "server": "Switch server public keys.",
        "address": "Read server configured in device server public key",
        "protocol": "Retrieve or change transport protocol the device uses to communicate with the cloud"
    },
    "library": {
        "add": "Add a library to the current project.",
        "create": "Create a new library in the specified or current directory",
        "copy": "Copy a library to the current project",
        "list": "List libraries available",
        "migrate": "Migrate a local library from v1 to v2 format",
        "search": "Search available libraries",
        "upload": "Uploads a private version of a library.",
        "publish": "Publish a private library, making it public",
        "view": "View details about a library"
    },
    "list": {},
    "login": {},
    "logout": {},
    "mesh": {
        "create": "Create a new network",
        "add": "Add a device to a network",
        "remove": "Remove a device from its network",
        "list": "List all networks and their member devices",
        "info": "Get information about the current device's network",
        "scan": "Scan for networks"
    },
    "monitor": {},
    "nyan": {},
    "preprocess": {},
    "product": {
        "device": "Manage the devices associated with your product"
    },
    "project": {
        "create": "Create a new project in the current or specified directory"
    },
    "publish": {},
    "serial": {
        "list": "Show devices connected via serial to your computer",
        "monitor": "Connect and display messages from a device",
        "identify": "Ask for and display device ID via serial",
        "wifi": "Configure Wi-Fi credentials over serial",
        "mac": "Ask for and display MAC address via serial",
        "inspect": "Ask for and display device module information via serial",
        "flash": "Flash firmware over serial using YMODEM protocol",
        "claim": "Claim a device with the given claim code"
    },
    "setup": {},
    "subscribe": {},
    "token": {
        "list": "List all access tokens for your account",
        "revoke": "Revoke an access token",
        "create": "Create a new access token"
    },
    "udp": {
        "send": "Sends a UDP packet to the specified host and port",
        "listen": "Listens for UDP packets on an optional port (default 5549)"
    },
    "update": {},
    "update-cli": {},
    "usb": {
        "list": "List the devices connected to the host computer",
        "start-listening": "Put a device into the listening mode",
        "listen": "alias for start-listening",
        "stop-listening": "Make a device exit the listening mode",
        "safe-mode": "Put a device into the safe mode",
        "dfu": "Put a device into the DFU mode",
        "reset": "Reset a device",
        "setup-done": "Set the setup done flag",
        "configure": "Update the system USB configuration",
        "cloud-status": "Check a device's cloud connection state"
    },
    "variable": {
        "list": "Show variables provided by your device(s)",
        "get": "Retrieve a value from your device",
        "monitor": "Connect and display messages from a device"
    },
    "webhook": {
        "create": "Creates a postback to the given url when your event is sent",
        "list": "Show your current Webhooks",
        "delete": "Deletes a Webhook",
        "POST": "Create a new POST request hook",
        "GET": "Create a new GET request hook"
    },
    "whoami": {}
}